import wollok.game.*
import pepita.*
import comidas.*
import extras.*

test "Al comer pepita aumenta su energia" {
	pepita.come(manzana)
	assert.equals(140, pepita.energia())
}

test "Al volar pepita pierde energia" {
	pepita.vola(1)
	assert.equals(91, pepita.energia())
}

test "Al volar mucho pepita queda cansada" {
	pepita.vola(100)
	assert.that(pepita.estaCansada())
}

test "Al moverse pepita pierde energia por el trayecto" {
	pepita.irA(game.at(1, 0))
	assert.equals(91, pepita.energia())
}

test "Al moverse pepita queda en la nueva posicion" {
	const nuevaPosicion = game.at(1, 1)
	pepita.irA(nuevaPosicion)
	assert.equals(nuevaPosicion, pepita.position())
}

test "Al estar en la misma posicion que el nido pepita crece" {
	pepita.irA(nido.position())
	assert.equals("pepita-grande.png", pepita.image())
}

test "Al estar en la misma posicion que silvestre pepita está gris" {
	pepita.irA(game.at(5,0))
	assert.equals("pepita-gris.png", pepita.image())
}

test "Pepita cuando viaja mucho y se cansa no se mueve más" {
	pepita.irA(game.at(10,10))
	assert.throwsException({ pepita.irA(game.at(7,3)) })
}

test "Pepita come y la comida desaparece del juego" {
	game.addVisual(pepita)
	game.addVisual(alpiste)
	pepita.irA(alpiste.position())
	
	pepita.comerLaComidaQueTenesDebajo()
	// Verificar que el alpiste no esté en el juego
	assert.notThat(game.hasVisual(alpiste))
}

test "Pepita intenta comer una comida lejana" {
	game.addVisual(pepita)
	game.addVisual(alpiste)
	
	assert.throwsExceptionWithMessage("No hay comida acá", { 
		pepita.comerLaComidaQueTenesDebajo()
	}) 
}


////// SILVESTRE
test "Cuando pepita se mueve Silvestre la persigue" {
	pepita.irA(game.at(5,5))
	assert.equals(game.at(5,0), silvestre.position())
}

test "Silvestre no puede estar a la izquierda" {
	pepita.irA(game.origin())
	assert.equals(game.at(3,0), silvestre.position())
}